/*
	Nathan Yarrison
	CISP 430
	Assignment 6
	11/16/2017
*/
// Implementation file for the Table class in table2 header file.

#include <cassert> // Provides ability to assert condtions.
#include "link2.h"

using namespace std;

namespace CISP430_A6
{
	template <class RecordType>
	Table<RecordType>::Table()
	{
		//Class constructor: Constructs an empty table.

		for (size_t i = 0; i < TABLE_SIZE; ++i)
		{
			data[i] = NULL;
		}

		total_records = 0;
	}

	template <class RecordType>
	Table<RecordType>::Table(const Table& source)
	{
		// Copy constructor: Creates a copy of the con
		for (int i = 0; i < TABLE_SIZE; ++i)
		{
			Node<RecordType> *tail_ptr;
			list_copy(source.data[i], data[i], tail_ptr);
		}

		total_records = source.total_records;
	}

	template <class RecordType>
	Table<RecordType>::~Table()
	{
		// Table destructor.
		for (int i = 0; i < TABLE_SIZE; ++i)
		{
			if (data[i] != NULL)
			{
				list_clear(data[i]);
			}
		}

		total_records = 0;
	}

	template<class RecordType>
	void Table<RecordType>::insert(const RecordType& entry)
	{
		bool alreadyThere = false;
		//Node<RecordType>* nodePtr;
		size_t index;
		assert(entry.key >= 0);

		// Call isPresent() to check if there is already a record with the given key in the table.
		alreadyThere = isPresent(entry);

		if (!alreadyThere)
		{
			// If there isn't a record with the given key, then just add the entry into the table.
			assert(size() < TABLE_SIZE); // If the total number of records exceeds the table size, end program.
			index = hash(entry.key); // Find postion to insert item at.

			// Check if the entry would be inserted at the head of list.
			if (index == 0)
			{
				// If the obtained index from has is 0, then insert entry at head.
				list_head_insert(data[index], entry.record);
			}
			else
			{
				// Else, the record needs to be inserted into the list at the appropriate key location.
				list_insert(data[index - 1], entry.record); // Takes index - 1 because the functions list_insert() takes the address of the record before the current spot as a parameter.
			}
		}
		else
		{
			// Else, the previous record at the given key must be over written with the new entry.
			assert(size() < TABLE_SIZE);
			index = hash(entry.key);

			list_insert(data[index - 1], entry.record);
		}
	}

	template<class RecordType>
	void Table<RecordType>::remove(int key)
	{
		// Function to remove the item at the given key.
		size_t index = hash(key); // Find location of record to be removed.

		Node<RecordType>* previous = NULL; // Create a pointer to the location before the record to be removed.
		Node<RecordType>* current = data[index]; // Create a pointer to the record to be removed.

		previous = data[index - 1]; // Point previous at the location of the record before the current record.

		if (data[index] == data[0])
		{
			list_head_remove(current);
		}
		else
		{
			list_remove(previous);
		}

		delete previous;
		delete current;
	}

	template<class RecordType>
	void Table<RecordType>::operator=(const Table & source)
	{
		if (this != &source) 
		{
			for (int i = 0; i < TABLE_SIZE; ++i) 
			{
				Node<RecordType> *tail_ptr;
				list_copy(source.data[i], data[i], tail_ptr);
			}
			total_records = source.total_records;
		}
	}

	template<class RecordType>
	void Table<RecordType>::print(int index)
	{
		Node<RecordType> *curNode = data[index];
		cout << "[( " << index << " )]----> ";
		if (data[index] != NULL)
		{
			while (curNode != NULL)
			{
				cout << "[" << data[index] << "]-->";
			}
		}
		else if ((data[index] == NULL) || (curNode == NULL))
		{
			cout << " NULL ";
		}
		cout << endl;
	}

	template<class RecordType>
	bool Table<RecordType>::isPresent(const RecordType & target) const
	{
		// Function to determine whether the target is in the table.
		bool found = false;
		RecordType result;
		find(target.key, found, result);
		return found;
	}

	template<class RecordType>
	void Table<RecordType>::find(int key, bool & found, RecordType & result) const
	{
		Node<RecordType>* current = NULL;
		Node<RecordType>* previous = NULL;
		assert(key >= 0);

		find_node(current, previous, key);
		if (found)
		{
			result = current->data;
		}
	}

	template<class RecordType>
	size_t Table<RecordType>::hash(int key) const
	{
		return key % TABLE_SIZE;
	}

	template<class RecordType>
	Node<RecordType>* Table<RecordType>::find_node(Node<RecordType>*& cursor, Node<RecordType>*& precursor, int key) const
	{
		// Function to find the node of a specific key in the table.
		size_t index = hash(key);
		cursor = data[index];
		precursor = data[index - 1];
		
		cursor = list_locate(cursor, key);
	}
}